#!/bin/bash
echo "Runing $(basename "${0}")"

ROOT_DIR=$(
    cd "$(dirname "${0}")" || return
    cd ..
    echo "${PWD}"
)
SOURCE_DIR="${ROOT_DIR}/src"
TEST_DIR="${ROOT_DIR}/test"
TOOLS_DIR="${ROOT_DIR}/tools"
INCLUDE_DIR="${ROOT_DIR}/include"
LIBRARY_DIR="${ROOT_DIR}/library"

export ROOT_DIR
export SOURCE_DIR
export TEST_DIR
export TOOLS_DIR
export INCLUDE_DIR
export LIBRARY_DIR

shell_files=$(find "${ROOT_DIR}" -name "*.sh" -not -path "./.githooks/*")
shell_test_files=$(find "${ROOT_DIR}" -name "*.bats" -not -path "./.githooks/*")
python_files=$(find "${ROOT_DIR}" -name "*.py" -not -path "./.githooks/*")

color_print() {
    printf "\e[1;35m"
    echo "${*}"
    printf "\e[0m"
}

color_print "Checking *.sh *.bats code style"
if shfmt -d -i 4 ${shell_files} ${shell_test_files}; then
    echo "shfmt pass"
else
    echo >&2 "Check code style fail, please format your code by shfmt with 4 space indent"
    exit 1
fi

color_print "Runing *.sh unit test"
for item in ${shell_test_files}; do
    eval "bats -x --print-output-on-failure ${item}" || exit 1
done

color_print "Runing shellcheck"
if shellcheck --shell=bash ${shell_files}; then
    echo "Shellcheck pass"
else
    echo >&2 "Shellcheck failed, please review your code again"
    exit 1
fi

export PYTHONPATH="${ROOT_DIR}"

color_print "Runing autopep8"
if autopep8 -a -d --exit-code --max-line-length=79 ${python_files}; then
    echo "autopep8 pass"
else
    echo >&2 "autopep8 check fail"
    exit 1
fi

# ToDo: run mypy before commit
# ToDo: run pytest before commit

# Check non ascii code file
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
    # Note that the use of brackets around a tr range is ok here, (it's
    # even required, for portability to Solaris 10's /usr/bin/tr), since
    # the square bracket bytes happen to fall in the designated range.
    test "$(git diff --cached --name-only --diff-filter=A -z "$against" |
        LC_ALL=C tr -d '[ -~]\0' | wc -c)" != 0; then
    cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
    exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached "$against" --
